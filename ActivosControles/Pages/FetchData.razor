@page "/fetchdata"
@layout MainLayout
@using ActivosControles.Data
@using ActivosControles.util.Request;
@using ActivosControles.util.Respuesta;
@inject WeatherForecastService ForecastService
@inject Blazored.SessionStorage.ISessionStorageService session

<PageTitle>Evaluacion</PageTitle>

<style>
    .rating-bar {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

        .rating-bar label {
            cursor: pointer;
            padding: 5px;
            background: #b200ff;
        }

            .rating-bar label:hover {
                background: #b200ff;
            }

        .rating-bar .star {
            font-size: 20px;
            color: gold;
        }

    .description {
        margin-top: 5px;
        font-style: italic;
        color: #555;
    }

    .container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .left-panel {
        /* Estilos para el panel izquierdo */
    }

    .right-panel {
        /* Estilos para el panel derecho */
    }

    .slider-container {
        margin-bottom: 10px;
    }

    .slider {
        width: 100%;
        background: #b200ff;
    }

    .evaluator-form {
        margin-bottom: 20px; /* Añadir un margen inferior */
    }

    .button-container {
        display: flex;
        justify-content: center; /* Centra el botón horizontalmente */
        margin-top: 20px; /* Añade espacio arriba del botón */
    }

</style>

<div class="container">
    @if (Assets == null || !Assets.Any())
    {
        <div>
            <h3>Debe hacer el listado de activos.</h3>
        </div>
    }
    else
    {
        <div class="left-panel">
            <h3>Activos</h3>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Código</th>
                        <th>Activos</th>
                        <th>Estado</th>
                        <th>Seleccionar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var asset in Assets)
                    {
                        <tr>
                            <td>@asset.id</td>
                            <td>@asset.nombre</td>
                            <td>@asset.estado</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => SelectAsset(asset)">Seleccionar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="right-panel">
            @if (SelectedActivo != null)
            {
                <h3>Calificar Activo</h3>
                <p>@SelectedActivo.nombre</p>
                <p>@SelectedActivo.id</p>

                <label for="criteria">Dimensión:</label>
                <select id="criteria" @onchange="OnCriteriaChange">
                    <option value="">Seleccione</option>
                    <option value="Disponibilidad">Disponibilidad</option>
                    <option value="Integridad">Integridad</option>
                    <option value="Confidencialidad">Confidencialidad</option>
                    <option value="Autenticidad">Autenticidad</option>
                </select>

                @if (!string.IsNullOrEmpty(SelectedDimension))
                {
                    <div>
                        <h4>@SelectedDimension</h4>
                        @foreach (var subCriteria in SubCriteria)
                        {
                            <div class="slider-container">
                                <label>@subCriteria:</label>
                                <input type="range" min="0" max="5" value="@SliderValues[subCriteria]" class="slider" @oninput="(e) => UpdateSliderValue(subCriteria, e.Value)" />
                                <span>@GetSliderDescription(subCriteria)</span>
                            </div>
                        }
                    </div>
                }

                <button class="btn btn-success" @onclick="SaveRating">Guardar</button>
                @if (!string.IsNullOrEmpty(SuccessMessage))
                {
                    <div class="alert alert-success mt-3">@SuccessMessage</div>
                }
            }
        </div>
    }
</div>

@code {
    private List<Activotabla> Assets = new List<Activotabla>();
    private listaTablaActivos generadorlista = new listaTablaActivos();
    private Activotabla SelectedActivo;
    private string SelectedDimension;
    private int SelectedDimensionNumber;
    private int SelectedCriterioNumber;
    private Dictionary<string, int> SliderValues = new Dictionary<string, int>();
    private List<string> SubCriteria = new List<string>();
    private usuariosesion sesionusua = new usuariosesion();
    private string SuccessMessage;

    protected override async Task OnInitializedAsync()
    {
        await inicializarListaAsync();
    }

    private async Task inicializarListaAsync()
    {
        sesionusua = await session.GetItemAsync<usuariosesion>("SesionUsuario");
        Assets = generadorlista.retornalistaActivos(sesionusua.or_id);
    }

    private void SelectAsset(Activotabla activo)
    {
        SelectedActivo = activo;
        SelectedDimension = null;
        SubCriteria.Clear();
        SliderValues.Clear();
        SuccessMessage = null; // Clear the message when a new asset is selected
        ResetSliders(); // Reset sliders when a new asset is selected
    }

    private void OnCriteriaChange(ChangeEventArgs e)
    {
        SelectedDimension = e.Value.ToString();
        SuccessMessage = null; // Clear the message when changing dimension

        switch (SelectedDimension)
        {
            case "Disponibilidad":
                SelectedDimensionNumber = 4;
                break;
            case "Integridad":
                SelectedDimensionNumber = 1;
                break;
            case "Confidencialidad":
                SelectedDimensionNumber = 2;
                break;
            case "Autenticidad":
                SelectedDimensionNumber = 3;
                break;
            default:
                SelectedDimensionNumber = 0;
                break;
        }

        SubCriteria = new List<string> { "LeyPE", "SI", "ADM", "Conf" };
        foreach (var subCriteria in SubCriteria)
        {
            SliderValues[subCriteria] = 0;
        }
        StateHasChanged(); // Force UI update
    }

    private void UpdateSliderValue(string subCriteria, object value)
    {
        if (int.TryParse(value.ToString(), out int intValue))
        {
            SliderValues[subCriteria] = intValue;
        }
    }

    private string GetSliderDescription(string subCriteria)
    {
        int value = SliderValues.ContainsKey(subCriteria) ? SliderValues[subCriteria] : 0;

        var descriptions = new Dictionary<string, List<string>>
        {
            { "LeyPE", new List<string>
                {
                    "Puntaje 1: Pudiera causar molestias a un individuo y pudiera quebrantar de forma leve",
                    "Puntaje 2: Pudiera causar molestias a un individuo y pudiera quebrantar de forma leve leyes o regulaciones.",
                    "Puntaje 3: Probablemente afecte a un individuo y probablemente suponga el incumplimiento de una ley o regulación.",
                    "Puntaje 4: Probablemente afecte a un grupo de individuos y probablemente quebrante leyes o regulaciones.",
                    "Puntaje 5: Probablemente afecte gravemente a un individuo o grupo de individuos y probablemente quebrante gravemente leyes o regulaciones."
                }
            },
            { "SI", new List<string>
                {
                    "Puntaje 1: No tendría un impacto significativo en la seguridad o en la investigación de incidentes.",
                    "Puntaje 2: Pudiera causar una merma en la seguridad o dificultar la investigación de un incidente, pero a un nivel menor.",
                    "Puntaje 3: Pudiera causar una merma en la seguridad o dificultar la investigación de un incidente.",
                    "Puntaje 4: Probablemente sea causa de una merma en la seguridad o dificulte la investigación de un incidente.",
                    "Puntaje 5: Probablemente sea causa de un grave incidente de seguridad o dificulte la investigación de incidentes graves."
                }
            },
            { "ADM", new List<string>
                {
                    "Puntaje 1: Pudiera impedir la operación efectiva de una parte de la organización, pero a un nivel menor.",
                    "Puntaje 2: Pudiera impedir la operación efectiva de una parte de la organización.",
                    "Puntaje 3: Probablemente impediría la operación efectiva de una parte de la organización.",
                    "Puntaje 4: Probablemente impediría la operación efectiva de más de una parte de la organización.",
                    "Puntaje 5: Probablemente impediría la operación efectiva de la organización."
                }
            },
            { "Conf", new List<string>
                {
                    "Puntaje 1: Pudiera causar una pérdida menor de la confianza dentro de la organización.",
                    "Puntaje 2: Probablemente cause una pérdida menor de la confianza dentro de la organización.",
                    "Puntaje 3: Probablemente afecte negativamente a las relaciones internas de la organización.",
                    "Puntaje 4: Probablemente causaría una publicidad negativa significativa y afectaría gravemente las relaciones con otras organizaciones o el público en general.",
                    "Puntaje 5: Probablemente causaría una publicidad negativa generalizada y afectaría gravemente las relaciones con otras organizaciones o el público en general."
                }
            }
        };

        if (descriptions.ContainsKey(subCriteria) && value > 0 && value <= 5)
        {
            return descriptions[subCriteria][value - 1];
        }
        return string.Empty;
    }

    private void SaveRating()
    {
        activoCalificacion calificar = new activoCalificacion();
        var requests = new List<guardarCalificacionrequest>();

        foreach (var subCriteria in SubCriteria)
        {
            switch (subCriteria)
            {
                case "LeyPE":
                    SelectedCriterioNumber = 1;
                    break;
                case "SI":
                    SelectedCriterioNumber = 6;
                    break;
                case "ADM":
                    SelectedCriterioNumber = 11;
                    break;
                case "Conf":
                    SelectedCriterioNumber = 16;
                    break;
                default:
                    SelectedCriterioNumber = 0;
                    break;
            }

            var request = new guardarCalificacionrequest
                {
                    us_codigo = sesionusua.us_id,
                    ac_codigo = SelectedActivo.codigo,
                    di_codigo = SelectedDimensionNumber.ToString(),
                    cr_codigo = SelectedCriterioNumber.ToString(),
                    pu_puntuacion = SliderValues[subCriteria].ToString()
                };
            requests.Add(request);
        }

        // Aquí debes enviar las solicitudes (requests) a tu API o manejador correspondiente
        foreach (var request in requests)
        {
            calificar.calificarActivo(request);
        }

        // Actualiza el mensaje de éxito
        SuccessMessage = "La calificación se ha guardado exitosamente.";

        // Reiniciar las barras de deslizamiento
        ResetSliders();
        StateHasChanged(); // Forzar la actualización de la interfaz de usuario
    }

    private void ResetSliders()
    {
        foreach (var subCriteria in SubCriteria)
        {
            SliderValues[subCriteria] = 0;
        }
    }
}
